For example: ``Given an array $A$ of length $n$ which contains integers, rearrange them so that for every index $i < n$ we have $A[i] \leq A[i + 1]$''

 ``Necessity is the mother of invention'', goes the proverb, and indeed most algorithms arise as answers to questions like ``How do I make a computer sort a list of book titles?'' or ``How do I arrange my files on the hard disk so that I can easily find them later?''. The path toward the answer usually looks somewhat like this:

No matter the exact recipe, there is a very enlightening thing to be noticed, namely all the different worlds in which these activites take place. The specification is usually written in English (or whatever the language of the algorithmist), intermingled with some mathematical symbols like quantifiers. The algorithm design process takes place in the algorithmist's mind, but after he's done, it is usually written down in some kind of comfortable pseudocode that allows skipping inessential detail.

The proof is again written in a mixture of English and mathematical symbols, but that's only the surface view. If we take a closer look, it will most likely turn out that the mathematical part is based on classical logic (which admits nonconstructive reasoning principles like proof by contradiction \cite{ProofByContradiction} - this can be often seen in proofs of optimality) and some kind of naive set theory, but if pressed a bit, the algorithmist would readily assert that the set theory could be axiomatized using, let's say, the Zermelo-Fraenkel axioms.